// 定义常量
def mavenGroup = 'com.lemon.faceu.sdk'
def mavenVersion = '0.0.63'
def repositoryUrl = uri('https://maven.byted.org/repository/faceu/')
def name = 'deploy'
def password = 'bytedance123'

// 增加监听
gradle.addBuildListener(new BuildAdapter() {
    @Override
    void projectsEvaluated(Gradle gradle) {
        initMaven(project, repositoryUrl, mavenGroup, mavenVersion, name, password)

        def projectSet = getDependencyProject(project)
        projectSet.each { dependencyProject ->
            println('dependencyProject：' + dependencyProject)
            initMaven(dependencyProject, repositoryUrl, mavenGroup, mavenVersion, name, password)
            dependenciesUpload(project, dependencyProject)
        }
    }
})

// 获取依赖的子模块
static Set<Project> getDependencyProject(Project project) {
    def projectSet = new HashSet()
    getDependencyProject(project, projectSet)
    return projectSet
}

// 获取依赖的子模块
static void getDependencyProject(Project project, Set<Project> projectSet) {
    project.configurations.each { configuration ->
        def name = configuration.name
        if (name == "implementation" || name == "api" || name == "compile") {
            configuration.dependencies.all { dependency ->
                if (dependency instanceof ProjectDependency) {
                    def dependencyProject = ((ProjectDependency) dependency).dependencyProject
                    if (projectSet.contains(dependencyProject)) {
                        return
                    } else {
                        projectSet.add(dependencyProject)
                    }
                    // 递归
                    getDependencyProject(dependencyProject, projectSet)
                }
            }
        }
    }
}

// 让子模块的upload与主模块的upload的产生依赖关系
static void dependenciesUpload(Project project, Project dependencyProject) {
    def uploadArchives = project.tasks.getByName("uploadArchives")
    def dependencyUploadArchives = dependencyProject.tasks.getByName("uploadArchives")
    uploadArchives.dependsOn(dependencyUploadArchives)
}

// 给一个模块配置maven
static void initMaven(Project project, URI uri, String group, String version, String name, String password) {
    project.apply(plugin: 'maven')
    project.uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: uri) {
                    authentication(userName: name, password: password)
                }

                pom.groupId = group
                pom.artifactId = project.name
                pom.version = version
                pom.whenConfigured {
                    dependencies.forEach { dep ->
                        if (dep.getVersion() == "unspecified") {
                            // 模块依赖
                            dep.groupId = group
                            dep.artifactId = dep.getArtifactId()
                            dep.version = version
                        }
                    }
                }
            }
        }
    }
}